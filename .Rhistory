#values_future <- values_future[!is.na(values_future)]
#print(values_future)
class(values_future)
#values_future <- values_future[!is.na(values_future)]
#print(values_future)
as.vector(values_future)
#values_future <- values_future[!is.na(values_future)]
#print(values_future)
as.POSIXct(as.vector(values_future))
#values_future <- values_future[!is.na(values_future)]
#print(values_future)
(as.character(values_future))
for (i in 0:(n_chunk-1)) {
#cat(i, '\n')
lower_ind <- ((i*n_per_chunk)+1)
upper_ind <- ((i+1)*n_per_chunk)
#cat(lower_ind,'****',upper_ind,'\n')
values_future <- future[c(lower_ind:upper_ind),]
#values_future <- values_future[!is.na(values_future)]
#print(values_future)
nrow_per_chunk[i] <- (as.character(values_future))
}
nrow_per_chunk
as.vector((as.character(values_future)))
nrow_per_chunk <- list()
for (i in 0:(n_chunk-1)){
#cat(i, '\n')
lower_ind <- ((i*n_per_chunk)+1)
upper_ind <- ((i+1)*n_per_chunk)
#cat(lower_ind,'****',upper_ind,'\n')
values_future <- future[c(lower_ind:upper_ind),]
#values_future <- values_future[!is.na(values_future)]
#print(values_future)
nrow_per_chunk[i] <- as.vector((as.character(values_future)))
}
i
#cat(lower_ind,'****',upper_ind,'\n')
values_future <- future[c(lower_ind:upper_ind),]
values_future
as.character(values_future)
as.vector(as.character(values_future))
values_future
as.character(values_future)
class(as.character(values_future))
nrow_per_chunk <- list()
i
nrow_per_chunk <- list()
#values_future <- values_future[!is.na(values_future)]
#print(values_future)
nrow_per_chunk[1] <- (as.character(values_future))
nrow_per_chunk
class(as.character(values_future))
as.vector(as.character(values_future))
class(as.vector(as.character(values_future)))
class(c("hola", "ho"))
#values_future <- values_future[!is.na(values_future)]
#print(values_future)
nrow_per_chunk[1] <- c("hola", "ho")
nrow_per_chunk
class(as.integer(as.character(values_future)))
as.integer((values_future))
#values_future <- values_future[!is.na(values_future)]
#print(values_future)
nrow_per_chunk[1] <- as.integer(values_future)
as.integer(values_future)
nrow_per_chunk[1]
nrow_per_chunk <- list()
#values_future <- values_future[!is.na(values_future)]
#print(values_future)
nrow_per_chunk[1] <- c(1,2) #as.integer(values_future)
nrow_per_chunk <- list()
nrow_per_chunk[1] <- 5
nrow_per_chunk[1] <- m
m
nrow_per_chunk <- list()
nrow_per_chunk[1] <- m$component.modes$additive
nrow_per_chunk <- list()
#values_future <- values_future[!is.na(values_future)]
#print(values_future)
nrow_per_chunk[1] <- as.factor(c(1,2) )#as.integer(values_future)
nrow_per_chunk
#cat(lower_ind,'****',upper_ind,'\n')
values_future <- future[c(lower_ind:upper_ind),]
#values_future <- values_future[!is.na(values_future)]
#print(values_future)
nrow_per_chunk[1,] <- values_future
nrow_per_chunk <- matrix(NA, nrow = n_chunk, ncol = n_per_chunk)
nrow_per_chunk[1,]
values_future
#values_future <- values_future[!is.na(values_future)]
#print(values_future)
nrow_per_chunk[1,] <- values_future
nrow_per_chunk <- matrix(NA, nrow = n_chunk, ncol = n_per_chunk)
for (i in 0:(n_chunk-1)){
#cat(i, '\n')
lower_ind <- ((i*n_per_chunk)+1)
upper_ind <- ((i+1)*n_per_chunk)
#cat(lower_ind,'****',upper_ind,'\n')
values_future <- future[c(lower_ind:upper_ind),]
#class(as.integer((values_future)))
#class(c("hola", "ho"))
#values_future <- values_future[!is.na(values_future)]
#print(values_future)
nrow_per_chunk[i,] <- values_future
}
nrow_per_chunk
i
n_chunk <- ceiling(total_nrow/n_per_chunk)-1
nrow_per_chunk <- matrix(NA, nrow = n_chunk, ncol = n_per_chunk)
for (i in 0:(n_chunk-1)){
#cat(i, '\n')
lower_ind <- ((i*n_per_chunk)+1)
upper_ind <- ((i+1)*n_per_chunk)
#cat(lower_ind,'****',upper_ind,'\n')
values_future <- future[c(lower_ind:upper_ind),]
#class(as.integer((values_future)))
#class(c("hola", "ho"))
#values_future <- values_future[!is.na(values_future)]
#print(values_future)
nrow_per_chunk[i,] <- values_future
}
nrow_per_chunk
n_chunk
ceiling(total_nrow/n_per_chunk)
i
35*25
36*25
ceiling(total_nrow/n_per_chunk)
for (i in 0:(n_chunk)){
#cat(i, '\n')
lower_ind <- ((i*n_per_chunk)+1)
upper_ind <- ((i+1)*n_per_chunk)
cat(lower_ind,'****',upper_ind,'\n')
#values_future <- future[c(lower_ind:upper_ind),]
#class(as.integer((values_future)))
#class(c("hola", "ho"))
#values_future <- values_future[!is.na(values_future)]
#print(values_future)
#nrow_per_chunk[i,] <- values_future
}
for (i in 0:(n_chunk)){
cat(i, '\n')
lower_ind <- ((i*n_per_chunk)+1)
upper_ind <- ((i+1)*n_per_chunk)
cat(lower_ind,'****',upper_ind,'\n')
#values_future <- future[c(lower_ind:upper_ind),]
#class(as.integer((values_future)))
#class(c("hola", "ho"))
#values_future <- values_future[!is.na(values_future)]
#print(values_future)
#nrow_per_chunk[i,] <- values_future
}
total_nrow
n_chunk
for (i in 0:(n_chunk)){
cat(i, '\n')
lower_ind <- ((i*n_per_chunk)+1)
upper_ind <- ((i+1)*n_per_chunk)
cat(lower_ind,'****',upper_ind,'\n')
#values_future <- future[c(lower_ind:upper_ind),]
#class(as.integer((values_future)))
#class(c("hola", "ho"))
#values_future <- values_future[!is.na(values_future)]
#print(values_future)
#nrow_per_chunk[i,] <- values_future
}
for (i in 0:(n_chunk)){
cat(i, '\n')
lower_ind <- ((i*n_per_chunk)+1)
upper_ind <- ((i+1)*n_per_chunk)
cat(lower_ind,'****',upper_ind,'\n')
values_future <- future[c(lower_ind:upper_ind),]
#class(as.integer((values_future)))
#class(c("hola", "ho"))
#values_future <- values_future[!is.na(values_future)]
#print(values_future)
#nrow_per_chunk[i,] <- values_future
}
future[c(lower_ind:upper_ind),]
values_future
cat(lower_ind,'****',upper_ind,'\n')
c(lower_ind:upper_ind)
future
lower_ind
future[c(lower_ind:upper_ind),]
nrow_per_chunk <- matrix(NA, nrow = n_chunk, ncol = n_per_chunk)
for (i in 0:(n_chunk)){
cat(i, '\n')
lower_ind <- ((i*n_per_chunk)+1)
upper_ind <- ((i+1)*n_per_chunk)
cat(lower_ind,'****',upper_ind,'\n')
values_future <- future[c(lower_ind:upper_ind),]
#class(as.integer((values_future)))
#class(c("hola", "ho"))
#values_future <- values_future[!is.na(values_future)]
#print(values_future)
nrow_per_chunk[i,] <- values_future
}
nrow_per_chunk
View(nrow_per_chunk)
i
nrow_per_chunk[i,]
is.na(nrow_per_chunk[i,])
row_values <- nrow_per_chunk[i,][!is.na(nrow_per_chunk[i,])]
row_values
row_values
as.POSIXct(row_values, tz= "GMT")
as.POSIXct(strptime(row_values[1], "%Y-%m-%d %H:%M:%S"))
strptime(row_values[1], "%Y-%m-%d %H:%M:%S")
transform(row_values, x = as.Date(as.character(row_values), "%Y%m%d"))
future[c(lower_ind:upper_ind),]
as.Date(as.character(row_values), "%Y-%m-%dT%H:%M:%S")
as.character(row_values)
row_values
lapply(row_values, function(x) as.Date(as.character(row_values), "%Y-%m-%dT%H:%M:%S"))
row_values[1]
as_date(row_values[1])
as_date(row_values[1], "%Y-%m-%dT%H:%M:%S")
as_date(row_values[1])
future[c(lower_ind:upper_ind),]
?as_date
as_date(row_values[1], tz='GMT')
as_date(row_values[1], format="%Y-%m-%dT%H:%M:%S")
lubridate::tz(row_values[1])
ymd(row_values[1])
ymd_hms(row_values[1])
as.POSIXct.Date(row_values[1])
as.POSIXct(row_values[1])
as.POSIXct.numeric(row_values[1])
as.POSIXct.default(row_values[1])
as.POSIXct.POSIXlt(row_values[1])
as.POSIXct.Date(row_values[1])
?as.POSIXct.Date
as.POSIXct.Date(row_values[1], tz='GMT')
as.POSIXct.Date(row_values[1], tz='GMT', format =  "%Y-%m-%dT%H:%M:%S")
future[c(lower_ind:upper_ind),]
as.Date(row_values[1])
as.Date.numeric(values_future)
future[c(lower_ind:upper_ind),]
as.Date.character(values_future)
nrow_per_chunk <- matrix(NA, nrow = n_chunk, ncol = n_per_chunk)
for (i in 0:(n_chunk)){
cat(i, '\n')
lower_ind <- ((i*n_per_chunk)+1)
upper_ind <- ((i+1)*n_per_chunk)
cat(lower_ind,'****',upper_ind,'\n')
values_future <- as.mueric(future[c(lower_ind:upper_ind),])
nrow_per_chunk[i,] <- values_future
}
nrow_per_chunk <- matrix(NA, nrow = n_chunk, ncol = n_per_chunk)
for (i in 0:(n_chunk)){
cat(i, '\n')
lower_ind <- ((i*n_per_chunk)+1)
upper_ind <- ((i+1)*n_per_chunk)
cat(lower_ind,'****',upper_ind,'\n')
values_future <- as.numeric(future[c(lower_ind:upper_ind),])
nrow_per_chunk[i,] <- values_future
}
i
row_values[i,]
i
i
row_values <- nrow_per_chunk[i,][!is.na(nrow_per_chunk[i,])]
row_values
as.Date(row_values[1])
x <- ts(rnorm(10), start = 0)
x
x[1]
as.Date(unclass(time(x)))
time(row_values[1])
future
future$label <- "prediction"
future
#cat(lower_ind,'****',upper_ind,'\n')
future[c(lower_ind:upper_ind),]
nn <- list()
i
#cat(lower_ind,'****',upper_ind,'\n')
nn[i] <- future[c(lower_ind:upper_ind),]
future[c(lower_ind:upper_ind),]
nn <- list()
#cat(lower_ind,'****',upper_ind,'\n')
nn[[i]] <- future[c(lower_ind:upper_ind),]
nn
nn <- list()
#values_future <- as.numeric(future[c(lower_ind:upper_ind),])
nn[[i]] <- values_future
nn
nn <- list()
values_future
values_future <- (future[c(lower_ind:upper_ind),])
values_future
future <- make_future_dataframe(m, periods = 24*20 )
values_future <- (future[c(lower_ind:upper_ind),])
values_future
nn[[i]] <- values_future
nn
future <- make_future_dataframe(m, periods = 24*20 )
#future$label <- "prediction"
#future.mx <- as.matrix(future)
total_nrow <- dim(future)[1]
n_per_chunk <- 25
n_chunk <- ceiling(total_nrow/n_per_chunk)-1
list_sequence <- list()
(future[c(lower_ind:upper_ind),])
values_future[!is.na(values_future)]
values_future <- values_future[!is.na(values_future)]
values_future
list_sequence[[i]] <- values_future
list_sequence
future <- make_future_dataframe(m, periods = 24*20 )
total_nrow <- dim(future)[1]
n_per_chunk <- 25
n_chunk <- ceiling(total_nrow/n_per_chunk)-1
list_sequence <- list()
for (i in 0:(n_chunk)){
#cat(i, '\n')
lower_ind <- ((i*n_per_chunk)+1)
upper_ind <- ((i+1)*n_per_chunk)
values_future <- (future[c(lower_ind:upper_ind),])
values_future <- values_future[!is.na(values_future)]
list_sequence[[i]] <- values_future
}
i
list_sequence <- list()
for (i in 0:(n_chunk)){
#cat(i, '\n')
lower_ind <- ((i*n_per_chunk)+1)
upper_ind <- ((i+1)*n_per_chunk)
values_future <- (future[c(lower_ind:upper_ind),])
values_future <- values_future[!is.na(values_future)]
list_sequence[[i+1]] <- values_future
}
list_sequence
n_chunk
n_chunk <- ceiling(total_nrow/n_per_chunk)
list_sequence <- list()
for (i in 0:(n_chunk-1)){
#cat(i, '\n')
lower_ind <- ((i*n_per_chunk)+1)
upper_ind <- ((i+1)*n_per_chunk)
values_future <- (future[c(lower_ind:upper_ind),])
values_future <- values_future[!is.na(values_future)]
list_sequence[[i+1]] <- values_future
}
list_sequence
i
list_sequence[i]
row_values
row_values <- list_sequence[i]
list_sequence[i]
row_values
forecast <- predict(m, row_values)
future_dates <- data.frame()
future_dates$ds <- row_values
future_dates <- data.frame()
row_values
list_sequence[[i]]
row_values <- list_sequence[[i]]
future_dates <- data.frame()
future_dates$ds <- row_values
future_dates <- data.frame()
row_values
future_dates$ds <- c(row_values)
row_values <- list(ds = list_sequence[[i]])
row_values
row_values <- list(ds = list_sequence[[i]])
l <- list(ds = list_sequence[[i]])
df <- data.frame(matrix(unlist(l), nrow=length(l), byrow=TRUE))
df
df <- as.data.frame(l)
df
forecast <- predict(m, df)
estimate.prophet <- function(i, m, list_sequence){
l <- list(ds = list_sequence[[i]])
df <- as.data.frame(l)
forecast_sample <- predict(m, df)
return(list(ds_pred = forecast_sample) )
}
est.prophet <- mclapply(1:3, FUN = function(i) estimate.prophet(i, m, list_sequence))
est.prophet
init_time1 <- Sys.time()
est.prophet <- mclapply(1:length(list_sequence), FUN = function(i) estimate.prophet(i, m, list_sequence))
#forecast <- predict(m, future)
end_time1 <- Sys.time()
print(difftime(init_time1,end_time1))
future <- make_future_dataframe(m, periods = prediction.n.ahead )
prediction.n.ahead
future <- make_future_dataframe(m, periods = 100 )
24*20
future <- make_future_dataframe(m, periods = 100 )
init_time1 <- Sys.time()
forecast_sample <- predict(m, future)
end_time1 <- Sys.time()
print(difftime(init_time1,end_time1))
24*20
future <- make_future_dataframe(m, periods = 24*20 )
total_nrow <- dim(future)[1]
n_per_chunk <- 100
n_chunk <- ceiling(total_nrow/n_per_chunk)
list_sequence <- list()
for (i in 0:(n_chunk-1)){
#cat(i, '\n')
lower_ind <- ((i*n_per_chunk)+1)
upper_ind <- ((i+1)*n_per_chunk)
values_future <- (future[c(lower_ind:upper_ind),])
values_future <- values_future[!is.na(values_future)]
list_sequence[[i+1]] <- values_future
}
n_chunk
24*20
total_nrow
#init_time1 <- Sys.time()
#forecast_sample <- predict(m, future)
#end_time1 <- Sys.time()
#print(difftime(init_time1,end_time1))
nrow(df)
df <- data.frame(
ds = DATAtrainwow$DateTime,
y = y
)
#init_time1 <- Sys.time()
#forecast_sample <- predict(m, future)
#end_time1 <- Sys.time()
#print(difftime(init_time1,end_time1))
nrow(df)
#init_time1 <- Sys.time()
#forecast_sample <- predict(m, future)
#end_time1 <- Sys.time()
#print(difftime(init_time1,end_time1))
nrow(df)+480
prediction.n.ahead = 24*20 #H*length(seqid)
future <- make_future_dataframe(m, periods = prediction.n.ahead )
#init_time1 <- Sys.time()
#forecast_sample <- predict(m, future)
#end_time1 <- Sys.time()
#print(difftime(init_time1,end_time1))
future <- tail(future, prediction.n.ahead)
total_nrow <- dim(future)[1]
future
total_nrow
rownames(future) <- NULL
total_nrow <- dim(future)[1]
total_nrow
future
n_per_chunk <- 100
n_chunk <- ceiling(total_nrow/n_per_chunk)
list_sequence <- list()
for (i in 0:(n_chunk-1)){
#cat(i, '\n')
lower_ind <- ((i*n_per_chunk)+1)
upper_ind <- ((i+1)*n_per_chunk)
values_future <- (future[c(lower_ind:upper_ind),])
values_future <- values_future[!is.na(values_future)]
list_sequence[[i+1]] <- values_future
}
estimate.prophet <- function(i, m, list_sequence){
l <- list(ds = list_sequence[[i]])
df <- as.data.frame(l)
forecast_sample <- predict(m, df)
return(list(ds_pred = forecast_sample) )
}
init_time1 <- Sys.time()
est.prophet <- mclapply(1:length(list_sequence), FUN = function(i) estimate.prophet(i, m, list_sequence))
#forecast <- predict(m, future)
end_time1 <- Sys.time()
print(difftime(init_time1,end_time1))
init_time1 <- Sys.time()
est.prophet <- lapply(1:length(list_sequence), FUN = function(i) estimate.prophet(i, m, list_sequence))
#forecast <- predict(m, future)
end_time1 <- Sys.time()
print(difftime(init_time1,end_time1))
init_time1 <- Sys.time()
est.prophet <- mclapply(1:length(list_sequence), FUN = function(i) estimate.prophet(i, m, list_sequence))
#forecast <- predict(m, future)
end_time1 <- Sys.time()
print(difftime(init_time1,end_time1))
est.prophet
unlist(est.prophet)
length(ls_predict_prophet)
length(est.prophet)
for (i in 1:length(est.prophet)) ls_predict_prophet[i] <- est.prophet[[i]]$ds_pred
ls_predict_prophet = list()
for (i in 1:length(est.prophet)) ls_predict_prophet[i] <- est.prophet[[i]]$ds_pred
i
est.prophet[[i]]$ds_pred
ls_predict_prophet = list()
for (i in 1:length(est.prophet)) ls_predict_prophet[i] <- est.prophet[[i]]$ds_pred$yhat
ls_predict_prophet = c()
for (i in 1:length(est.prophet)) ls_predict_prophet[i] <- est.prophet[[i]]$ds_pred$yhat
ls_predict_prophet
est.prophet[[i]]
est.prophet[[i]]$ds_pred
est.prophet[[i]]$ds_pred$yhat
ls_predict_prophet = list()
for (i in 1:length(est.prophet)) ls_predict_prophet[[i]] <- est.prophet[[i]]$ds_pred$yhat
ls_predict_prophet
unlist(ls_predict_prophet)
length(unlist(ls_predict_prophet))
#ts.plot(as.vector(t(pred)))
#lines(as.vector(t(filter_test %>% select(ytarget)) ) , col='red')
library(tidymodels)
library(tidyverse)
library(timetk)
?lightgbm
?lgb.train
?lgb.train
2**10-1
seq(0.18, 0.3, 0.03)
seq(0.18, 0.3, 0.02)
seq(0.01, 0.1, 0.01)
act_lags
