mean_ridge_single <- mean(beta_ridge, na.rm =TRUE)
bias_OLS <- beta_true - mean_OLS
bias_OLS_single <- mean(beta_true) - mean_OLS_single
bias_ridge <- beta_true - mean_ridge
bias_ridge_single <- mean(beta_true)- mean_ridge_single
print(c(bias_OLS_single,bias_ridge_single ) )
bias_ridge
setwd("/home/user/Desktop/files_desktop/forecasting_energy_market")
source('code/functions_d2c.R')
pw<- "#q6a21I&OA5k"
library(conflicted)
library(tidyr)
library(RMariaDB)
library(dplyr)
library(dbx)
library(stringr)
library(lubridate)
library(readr)
library(shiny)
library(data.table)
library(zoo)
library(dbplyr)
library(data.table)
library(Matrix)
#####
library(glmnet)
library(lightgbm)
library(astsa)
library(fastDummies)
library(RColorBrewer)
library(Hmisc)
library(corrplot)
library(glmnet)
library(ggplot2)
library(tidyverse)
library(tidymodels)
library(modeltime)
library(modeltime.ensemble)
library(TSstudio)
library(timetk)
library(forecast)
library(xts)
library(mgcv)
library(purrr)
library(imputeTS)
library(forecast)
library(stats)
library(xgboost)
library(caret)
library(gbm)
library(lme4)
library(parallel)
library(sgd)
load(".RData")
load(".RData")
lambdas
lambdas <- c(10,20,30,40)
sgd_reg
estimate.sgd
filter_valid
filter_test
filter_train <- DATAtrain[, c(ytarget, features_x)] %>%
replace(is.na(.), 0)
filter_train <- DATAtrain[, c(ytarget, features_x)] %>%
replace(is.na(.), 0)
filter_train
filter_valid <- filter_train %>% tail(20)
filter_train <- filter_train %>% head(nrow(filter_train)-20)
dim(filter_test)
dim(filter_train)
dim(filter_valid)
#5+"kk"
estimate.sgd <- function(id_val, filter_train, filter_valid, alphas, lambdas, ytarget){
lambda_val <- lambdas[id_val]
sgd_reg = sgd(x = as.matrix(filter_train %>% select(-ytarget) ),
y = filter_train[,ytarget], model = "glm",
model.control = list(lambda1 = alphas, lambda2 = lambda_val),
sgd.control = list(method = 'implicit'))
sgd_pred_val <- predict(sgd_reg, newdata = as.matrix(filter_valid %>% select(-ytarget) ) )
rmse_val <- RMSE(as.matrix(filter_valid %>% select(ytarget)), sgd_pred_val)
#return(c(lambda_val, rmse_val))
return(list(lambda = lambda_val,rmse = rmse_val, mod = sgd_reg ))
}
init_time1 <- Sys.time()
est.sgd <- mclapply(1:length(lambdas), FUN = function(i) estimate.sgd(i, filter_train,
filter_valid, alphas,
lambdas, ytarget))
#hist(as.numeric(as.vector(est.sgd[[4]]$mod)))
#(as.vector(as.array(est.sgd[[4]]$mod)))
end_time1 <- Sys.time()
print(difftime(init_time1,end_time1))
est.sgd[[4]]$mod
est.sgd
alphas <- 1
#5+"kk"
estimate.sgd <- function(id_val, filter_train, filter_valid, alphas, lambdas, ytarget){
lambda_val <- lambdas[id_val]
sgd_reg = sgd(x = as.matrix(filter_train %>% select(-ytarget) ),
y = filter_train[,ytarget], model = "glm",
model.control = list(lambda1 = alphas, lambda2 = lambda_val),
sgd.control = list(method = 'implicit'))
sgd_pred_val <- predict(sgd_reg, newdata = as.matrix(filter_valid %>% select(-ytarget) ) )
rmse_val <- RMSE(as.matrix(filter_valid %>% select(ytarget)), sgd_pred_val)
#return(c(lambda_val, rmse_val))
return(list(lambda = lambda_val,rmse = rmse_val, mod = sgd_reg ))
}
init_time1 <- Sys.time()
est.sgd <- mclapply(1:length(lambdas), FUN = function(i) estimate.sgd(i, filter_train,
filter_valid, alphas,
lambdas, ytarget))
lambda_val <- 10
sgd_reg = sgd(x = as.matrix(filter_train %>% select(-ytarget) ),
y = filter_train[,ytarget], model = "glm",
model.control = list(lambda1 = alphas, lambda2 = lambda_val),
sgd.control = list(method = 'implicit'))
sgd_reg
sgd_pred_val <- predict(sgd_reg, newdata = as.matrix(filter_valid %>% select(-ytarget) ) )
rmse_val <- RMSE(as.matrix(filter_valid %>% select(ytarget)), sgd_pred_val)
#5+"kk"
estimate.sgd <- function(id_val, filter_train, filter_valid, alphas, lambdas, ytarget){
lambda_val <- lambdas[id_val]
sgd_reg = sgd(x = as.matrix(filter_train %>% select(-ytarget) ),
y = filter_train[,ytarget], model = "glm",
model.control = list(lambda1 = alphas, lambda2 = lambda_val),
sgd.control = list(method = 'implicit'))
sgd_pred_val <- predict(sgd_reg, newdata = as.matrix(filter_valid %>% select(-ytarget) ) )
rmse_val <- RMSE(as.matrix(filter_valid %>% select(ytarget)), sgd_pred_val)
#return(c(lambda_val, rmse_val))
return(list(lambda = lambda_val,rmse = rmse_val, mod = sgd_reg ))
}
init_time1 <- Sys.time()
est.sgd <- mclapply(1:length(lambdas), FUN = function(i) estimate.sgd(i, filter_train,
filter_valid, alphas,
lambdas, ytarget))
#hist(as.numeric(as.vector(est.sgd[[4]]$mod)))
#(as.vector(as.array(est.sgd[[4]]$mod)))
end_time1 <- Sys.time()
print(difftime(init_time1,end_time1))
#5+"kk"
estimate.sgd <- function(id_val, filter_train, filter_valid, alphas, lambdas, ytarget){
lambda_val <- lambdas[id_val]
sgd_reg = sgd(x = as.matrix(filter_train %>% select(-ytarget) ),
y = filter_train[,ytarget], model = "lm",
model.control = list(lambda1 = alphas, lambda2 = lambda_val),
sgd.control = list(method = 'implicit'))
sgd_pred_val <- predict(sgd_reg, newdata = as.matrix(filter_valid %>% select(-ytarget) ) )
rmse_val <- RMSE(as.matrix(filter_valid %>% select(ytarget)), sgd_pred_val)
#return(c(lambda_val, rmse_val))
return(list(lambda = lambda_val,rmse = rmse_val, mod = sgd_reg ))
}
init_time1 <- Sys.time()
est.sgd <- mclapply(1:length(lambdas), FUN = function(i) estimate.sgd(i, filter_train,
filter_valid, alphas,
lambdas, ytarget))
#hist(as.numeric(as.vector(est.sgd[[4]]$mod)))
#(as.vector(as.array(est.sgd[[4]]$mod)))
end_time1 <- Sys.time()
print(difftime(init_time1,end_time1))
?sgd
#5+"kk"
estimate.sgd <- function(id_val, filter_train, filter_valid, alphas, lambdas, ytarget){
lambda_val <- lambdas[id_val]
sgd_reg = sgd(x = as.matrix(filter_train %>% select(-ytarget) ),
y = filter_train[,ytarget], model = "lm",
model.control = list(lambda1 = alphas, lambda2 = lambda_val),
sgd.control = list(method = 'ai-sgd'))
sgd_pred_val <- predict(sgd_reg, newdata = as.matrix(filter_valid %>% select(-ytarget) ) )
rmse_val <- RMSE(as.matrix(filter_valid %>% select(ytarget)), sgd_pred_val)
#return(c(lambda_val, rmse_val))
return(list(lambda = lambda_val,rmse = rmse_val, mod = sgd_reg ))
}
init_time1 <- Sys.time()
est.sgd <- mclapply(1:length(lambdas), FUN = function(i) estimate.sgd(i, filter_train,
filter_valid, alphas,
lambdas, ytarget))
#hist(as.numeric(as.vector(est.sgd[[4]]$mod)))
#(as.vector(as.array(est.sgd[[4]]$mod)))
end_time1 <- Sys.time()
print(difftime(init_time1,end_time1))
#5+"kk"
estimate.sgd <- function(id_val, filter_train, filter_valid, alphas, lambdas, ytarget){
lambda_val <- lambdas[id_val]
sgd_reg = sgd(x = as.matrix(filter_train %>% select(-ytarget) ),
y = filter_train[,ytarget], model = "glm",
model.control = list(lambda1 = alphas, lambda2 = lambda_val),
sgd.control = list(method = 'ai-sgd'))
sgd_pred_val <- predict(sgd_reg, newdata = as.matrix(filter_valid %>% select(-ytarget) ) )
rmse_val <- RMSE(as.matrix(filter_valid %>% select(ytarget)), sgd_pred_val)
#return(c(lambda_val, rmse_val))
return(list(lambda = lambda_val,rmse = rmse_val, mod = sgd_reg ))
}
init_time1 <- Sys.time()
est.sgd <- mclapply(1:length(lambdas), FUN = function(i) estimate.sgd(i, filter_train,
filter_valid, alphas,
lambdas, ytarget))
#hist(as.numeric(as.vector(est.sgd[[4]]$mod)))
#(as.vector(as.array(est.sgd[[4]]$mod)))
end_time1 <- Sys.time()
print(difftime(init_time1,end_time1))
#5+"kk"
estimate.sgd <- function(id_val, filter_train, filter_valid, alphas, lambdas, ytarget){
lambda_val <- lambdas[id_val]
sgd_reg = sgd(x = as.matrix(filter_train %>% select(-ytarget) ),
y = filter_train[,ytarget], model = "glm",
model.control = list(lambda1 = alphas, lambda2 = lambda_val),
sgd.control = list(method = 'ai-sgd'))
sgd_pred_val <- predict(sgd_reg, newdata = as.matrix(filter_valid %>% select(-ytarget) ) )
rmse_val <- RMSE(as.matrix(filter_valid %>% select(ytarget)), sgd_pred_val)
#return(c(lambda_val, rmse_val))
return(list(lambda = lambda_val,rmse = rmse_val, mod = sgd_reg ))
}
init_time1 <- Sys.time()
est.sgd <- mclapply(1:length(lambdas), FUN = function(i) estimate.sgd(i, filter_train,
filter_valid, alphas,
lambdas, ytarget))
#hist(as.numeric(as.vector(est.sgd[[4]]$mod)))
#(as.vector(as.array(est.sgd[[4]]$mod)))
end_time1 <- Sys.time()
print(difftime(init_time1,end_time1))
#5+"kk"
estimate.sgd <- function(id_val, filter_train, filter_valid, alphas, lambdas, ytarget){
lambda_val <- lambdas[id_val]
sgd_reg = sgd(x = as.matrix(filter_train %>% select(-ytarget) ),
y = filter_train[,ytarget], model = "lm",
model.control = list(lambda1 = alphas, lambda2 = lambda_val),
sgd.control = list(method = 'ai-sgd'))
sgd_pred_val <- predict(sgd_reg, newdata = as.matrix(filter_valid %>% select(-ytarget) ) )
rmse_val <- RMSE(as.matrix(filter_valid %>% select(ytarget)), sgd_pred_val)
#return(c(lambda_val, rmse_val))
return(list(lambda = lambda_val,rmse = rmse_val, mod = sgd_reg ))
}
init_time1 <- Sys.time()
est.sgd <- mclapply(1:length(lambdas), FUN = function(i) estimate.sgd(i, filter_train,
filter_valid, alphas,
lambdas, ytarget))
#hist(as.numeric(as.vector(est.sgd[[4]]$mod)))
#(as.vector(as.array(est.sgd[[4]]$mod)))
end_time1 <- Sys.time()
print(difftime(init_time1,end_time1))
est.sgd[[4]]$mod
est.sgd[[4]]$mod$coefficients
hist(est.sgd[[4]]$mod$coefficients)
5.377290e+22
round(5.377290e+22)
round(5.377290e+22, 10)
round(5.377290e+22, 23)
load(".RData")
set.seed(1)
samp <- sample(1:nrow(lgb.grid ), 15)
lgb.gridFilter <- lgb.grid [samp,]
# create datasets
lgb.test <- lgb.Dataset(data = as.matrix(filter_test),
label = DATAtest[,ytarget] )
lgb.train <- lgb.Dataset(data = as.matrix(filter_train %>% select(-ytarget) %>% head(nrow(filter_train)-20) ),
label = head(filter_train[,ytarget], nrow(filter_train)-20) )
lgb.valid <- lgb.Dataset(data = as.matrix(filter_train %>% select(-ytarget) %>% tail(20) ),
label = head(filter_train[,ytarget], tail(20) ) )
lgb.gridFilter
samp <- sample(1:nrow(lgb.grid ), 15)
lgb.grid <- base::expand.grid(
list(
boosting= c("gbdt","dart"),
obj = c("mse"),
num_leaves = seq(20, 40, 1),
max_depth = seq(2,10,1),
min_sum_hessian_in_leaf = c(4,6),
bagging_fraction = c(0.8),
learning_rate = seq(0.01, 0.2, 0.01),
num_iterations = seq(40, 65, 3),
lambda_l1 = seq(0.01, 0.1, 0.01),
lambda_l2 = seq(0.01, 0.1, 0.01)
))
samp <- sample(1:nrow(lgb.grid ), 15)
lgb.gridFilter <- lgb.grid [samp,]
recent_time <- Sys.time()
ls_models <- list()
ls_bst_score <- list()
for (hyper_combi in 1:nrow(lgb.gridFilter)){
ls_params <- as.list(data.frame(lgb.gridFilter[hyper_combi,]) )
obj <- as.character(ls_params$obj)
ls_params <- within(ls_params, rm(obj))
watchlist <- list(validation = lgb.valid)
lgb_alg <- lgb.train(params = ls_params,obj = obj,
data = lgb.train, valids = watchlist,
early_stopping_rounds = 70,verbose = 1,
eval_freq = 10, force_col_wise=TRUE,
nthread = 5)
ls_models[[hyper_combi]] <- lgb_alg
ls_bst_score[[hyper_combi]] <- lgb_alg$best_score
}
cat('finish lgb.....\n')
last_time <- Sys.time()
diff_mode_iter <- difftime(recent_time,last_time)
diff_mode_iter
estimate.lgb <- function(hyper_combi, lgb.train, lgb.valid, lgb.gridFilter){
ls_params <- as.list(data.frame(lgb.gridFilter[hyper_combi,]) )
obj <- as.character(ls_params$obj)
ls_params <- within(ls_params, rm(obj))
lgb_alg <- lgb.train(params = ls_params,obj = obj,
data = lgb.train, valids = watchlist,
early_stopping_rounds = 70,verbose = 1,
eval_freq = 10, force_col_wise=TRUE,
nthread = 5)
return( list(mod = lgb_alg, score = lgb_alg))
return(list(lambda = lambda_val,rmse = rmse_val, mod = lgb_alg$best_score ))
}
lgb.gridFilter
nrow(lgb.gridFilter)
1:nrow(lgb.gridFilter)
estimate.lgb <- function(hyper_combi, lgb.train, lgb.valid, lgb.gridFilter){
ls_params <- as.list(data.frame(lgb.gridFilter[hyper_combi,]) )
obj <- as.character(ls_params$obj)
ls_params <- within(ls_params, rm(obj))
lgb_alg <- lgb.train(params = ls_params,obj = obj,
data = lgb.train, valids = watchlist,
early_stopping_rounds = 70,verbose = 1,
eval_freq = 10, force_col_wise=TRUE,
nthread = 5)
return( list(mod = lgb_alg, score = lgb_alg$best_score))
}
estimate.lgb <- function(hyper_combi, lgb.train, lgb.valid, lgb.gridFilter){
ls_params <- as.list(data.frame(lgb.gridFilter[hyper_combi,]) )
obj <- as.character(ls_params$obj)
ls_params <- within(ls_params, rm(obj))
lgb_alg <- lgb.train(params = ls_params,obj = obj,
data = lgb.train, valids = watchlist,
early_stopping_rounds = 70,verbose = 1,
eval_freq = 10, force_col_wise=TRUE,
nthread = 5)
return( list(mod = lgb_alg, score = lgb_alg$best_score))
}
recent_time <- Sys.time()
est.lgb <- mclapply(1:nrow(lgb.gridFilter), FUN = function(i) estimate.lgb(i, lgb.train,
lgb.valid, lgb.gridFilter))
1:nrow(lgb.gridFilter)
hyper_combi <- 1
ls_params <- as.list(data.frame(lgb.gridFilter[hyper_combi,]) )
ls_params
obj <- as.character(ls_params$obj)
ls_params <- within(ls_params, rm(obj))
ls_params
lgb_alg <- lgb.train(params = ls_params,obj = obj,
data = lgb.train, valids = watchlist,
early_stopping_rounds = 70,verbose = 1,
eval_freq = 10, force_col_wise=TRUE,
nthread = 5)
estimate.lgb <- function(hyper_combi, lgb.train, lgb.valid, lgb.gridFilter){
hyper_combi <- 1
ls_params <- as.list(data.frame(lgb.gridFilter[hyper_combi,]) )
obj <- as.character(ls_params$obj)
ls_params <- within(ls_params, rm(obj))
lgb_alg <- lgb.train(params = ls_params,obj = obj,
data = lgb.train, valids = watchlist,
early_stopping_rounds = 70,verbose = 1,
eval_freq = 10, force_col_wise=TRUE,
nthread = 5)
return( list(mod = lgb_alg, score = lgb_alg$best_score))
}
estimate.lgb <- function(hyper_combi, lgb.train, lgb.valid, lgb.gridFilter){
ls_params <- as.list(data.frame(lgb.gridFilter[hyper_combi,]) )
obj <- as.character(ls_params$obj)
ls_params <- within(ls_params, rm(obj))
lgb_alg <- lgb.train(params = ls_params,obj = obj,
data = lgb.train, valids = watchlist,
early_stopping_rounds = 70,verbose = 1,
eval_freq = 10, force_col_wise=TRUE,
nthread = 5)
return( list(mod = lgb_alg, score = lgb_alg$best_score))
}
est.lgb <- mclapply(1:nrow(lgb.gridFilter), FUN = function(hyper_combi) estimate.lgb(hyper_combi,
lgb.train,
lgb.valid,
lgb.gridFilter))
nrow(lgb.gridFilter)
est.lgb <- sapply(1:nrow(lgb.gridFilter), FUN = function(hyper_combi) estimate.lgb(hyper_combi,
lgb.train,
lgb.valid,
lgb.gridFilter))
recent_time <- Sys.time()
est.lgb <- sapply(1:nrow(lgb.gridFilter), FUN = function(hyper_combi) estimate.lgb(hyper_combi,
lgb.train,
lgb.valid,
lgb.gridFilter))
last_time <- Sys.time()
diff_mode_iter <- difftime(recent_time,last_time)
diff_mode_iter
recent_time <- Sys.time()
est.lgb <- mclapply(1:nrow(lgb.gridFilter), FUN = function(hyper_combi) estimate.lgb(hyper_combi,
lgb.train,
lgb.valid,
lgb.gridFilter))
recent_time <- Sys.time()
est.lgb <- slapply(1:nrow(lgb.gridFilter), FUN = function(hyper_combi) estimate.lgb(hyper_combi,
lgb.train,
lgb.valid,
lgb.gridFilter))
recent_time <- Sys.time()
est.lgb <- sapply(1:nrow(lgb.gridFilter), FUN = function(hyper_combi) estimate.lgb(hyper_combi,
lgb.train,
lgb.valid,
lgb.gridFilter))
last_time <- Sys.time()
diff_mode_iter <- difftime(recent_time,last_time)
diff_mode_iter
estimate.lgb <- function(hyper_combi, lgb.train, lgb.valid, lgb.gridFilter){
ls_params <- as.list(data.frame(lgb.gridFilter[hyper_combi,]) )
obj <- as.character(ls_params$obj)
ls_params <- within(ls_params, rm(obj))
lgb_alg <- lgb.train(params = ls_params,obj = obj,
data = lgb.train, valids = watchlist,
early_stopping_rounds = 70,verbose = 1,
eval_freq = 10, force_col_wise=TRUE,
nthread = 5)
return( list(mod = lgb_alg, score = lgb_alg$best_score) )
}
recent_time <- Sys.time()
est.lgb <- sapply(1:nrow(lgb.gridFilter), FUN = function(hyper_combi) estimate.lgb(hyper_combi,
lgb.train,
lgb.valid,
lgb.gridFilter))
last_time <- Sys.time()
diff_mode_iter <- difftime(recent_time,last_time)
diff_mode_iter
estimate.lgb <- function(hyper_combi, lgb.train, lgb.valid, lgb.gridFilter){
ls_params <- as.list(data.frame(lgb.gridFilter[hyper_combi,]) )
obj <- as.character(ls_params$obj)
ls_params <- within(ls_params, rm(obj))
lgb_alg <- lgb.train(params = ls_params,obj = obj,
data = lgb.train, valids = watchlist,
early_stopping_rounds = 70,verbose = 1,
eval_freq = 10, force_col_wise=TRUE,
nthread = 6)
return( list(mod = lgb_alg, score = lgb_alg$best_score) )
}
recent_time <- Sys.time()
est.lgb <- sapply(1:nrow(lgb.gridFilter), FUN = function(hyper_combi) estimate.lgb(hyper_combi,
lgb.train,
lgb.valid,
lgb.gridFilter))
last_time <- Sys.time()
diff_mode_iter <- difftime(recent_time,last_time)
diff_mode_iter
#last_time <- Sys.time()
#diff_mode_iter <- difftime(recent_time,last_time)
est.lgb
#last_time <- Sys.time()
#diff_mode_iter <- difftime(recent_time,last_time)
class(est.lgb)
ls_params <- as.list(data.frame(lgb.gridFilter[hyper_combi,]) )
obj <- as.character(ls_params$obj)
ls_params <- within(ls_params, rm(obj))
lgb_alg <- lgb.train(params = ls_params,obj = obj,
data = lgb.train, valids = watchlist,
early_stopping_rounds = 70,verbose = 1,
eval_freq = 10, force_col_wise=TRUE,
nthread = 6)
lgb_alg
lgb_alg$best_score
list(mod = lgb_alg, score = lgb_alg$best_score)
#recent_time <- Sys.time()
est.lgb <- lapply(1:nrow(lgb.gridFilter), FUN = function(hyper_combi) estimate.lgb(hyper_combi,
lgb.train,
lgb.valid,
lgb.gridFilter))
est.lgb
#last_time <- Sys.time()
#diff_mode_iter <- difftime(recent_time,last_time)
class(est.lgb)
recent_time <- Sys.time()
est.lgb <- lapply(1:nrow(lgb.gridFilter), FUN = function(hyper_combi) estimate.lgb(hyper_combi,
lgb.train,
lgb.valid,
lgb.gridFilter))
last_time <- Sys.time()
diff_mode_iter <- difftime(recent_time,last_time)
diff_mode_iter
#last_time <- Sys.time()
#diff_mode_iter <- difftime(recent_time,last_time)
est.lgb[[1]]
#last_time <- Sys.time()
#diff_mode_iter <- difftime(recent_time,last_time)
est.lgb[[1]]$mod
rmse_vec = c()
for (i in 1:nrow(lgb.gridFilter)) rmse_vec[i] <- est.lgb[[i]]$score
id_min_rmse <- which.min(rmse_vec)
rmse_vec
id_min_rmse
est.lgb[[id_min_rmse]]
test_sparse  = Matrix(as.matrix(filter_test), sparse=TRUE)
cat('test has: ',dim(filter_test),'\n')
cat(length(HORIZON[[i.hl]]),'----' ,length(seqid),'\n')
pred <- t(matrix(predict(best_tune_model, data = test_sparse),
nrow = length(HORIZON[[i.hl]]), ncol= length(seqid), byrow = TRUE))
best_tune_model  <- est.lgb[[id_min_rmse]]$mod
pred <- t(matrix(predict(best_tune_model, data = test_sparse),
nrow = length(HORIZON[[i.hl]]), ncol= length(seqid), byrow = TRUE))
dim(filter_test)
test_sparse  = Matrix(as.matrix(filter_test %>% select(-ytarget)), sparse=TRUE)
dim(filter_test)
View(filter_test)
dim(test_sparse)
pred <- t(matrix(predict(best_tune_model, data = test_sparse),
nrow = length(HORIZON[[i.hl]]), ncol= length(seqid), byrow = TRUE))
pred
est.lgb <- mclapply(1:nrow(lgb.gridFilter), FUN = function(hyper_combi) estimate.lgb(hyper_combi,
lgb.train,
lgb.valid,
lgb.gridFilter))
est.lgb <- lapply(1:nrow(lgb.gridFilter), FUN = function(hyper_combi) estimate.lgb(hyper_combi,
lgb.train,
lgb.valid,
lgb.gridFilter))
